Players = game:GetService("Players")
Workspace = game:GetService("Workspace")
UserInputService = game:GetService("UserInputService")
RunService = game:GetService("RunService")
ReplicatedStorage = game:GetService("ReplicatedStorage")
TweenService = game:GetService("TweenService")
LocalPlayer = Players.LocalPlayer
HttpService = game:GetService("HttpService") -- Get HttpService for JSON

-- Variables for state storage
local ghostEnabled = false
local originalCharacter
local ghostClone
local originalCFrame
local originalAnimateScript
local updateConnection

-- Variable to store the original HipHeight of the clone
local ghostOriginalHipHeight

-- Clone settings: overall scale and extra width factor (default = 1, i.e., original size)
local cloneSize = 1
local cloneWidth = 1

-- Tables to store the original sizes of parts and Motor6D CFrames (for non-uniform scaling)
local ghostOriginalSizes = {}
local ghostOriginalMotorCFrames = {}

-- List of body parts to synchronize
local bodyParts = {
"Head", "UpperTorso", "LowerTorso",
"LeftUpperArm", "LeftLowerArm", "LeftHand",
"RightUpperArm", "RightLowerArm", "RightHand",
"LeftUpperLeg", "LeftLowerLeg", "LeftFoot",
"RightUpperLeg", "RightLowerLeg", "RightFoot"
}
-- NEW: Table to store favorite animations (by name)
local favoriteAnimations = {}
-- NEW: Table to store keybinds for animations (animation name -> KeyCode)
local animationKeybinds = {}

-- Function to save favorite animations to a file
local function saveFavorites()
    local success, encodedFavorites = pcall(HttpService.JSONEncode, HttpService, favoriteAnimations)
    if success then
        if writefile then
            local saveSuccess, errorMessage = pcall(function()
                writefile("favorite_animations.json", encodedFavorites)
            end)
            if not saveSuccess then
                warn("Error saving favorites:", errorMessage)
            end
        else
            warn("File system functions not supported in this environment")
        end
    else
        warn("Error encoding favorites:", encodedFavorites)
    end
end

-- Function to load favorite animations from a file
local function loadFavorites()
    local success, fileContent = pcall(readfile, "favorite_animations.json")
    if success then
        local decodeSuccess, decodedFavorites = pcall(function()
            return HttpService:JSONDecode(fileContent)
        end)
        if decodeSuccess and typeof(decodedFavorites) == "table" then
            favoriteAnimations = decodedFavorites
            print("Favorites loaded successfully.")
        else
            warn("Error decoding favorites:", decodedFavorites)
            favoriteAnimations = {}
        end
    else
        warn("No favorites file found, starting with empty favorites")
        favoriteAnimations = {}
    end
end

-- NEW: Function to save animation keybinds to a file
local function saveKeybinds()
    local keybindsToSave = {}
    for animName, keyCode in pairs(animationKeybinds) do
        keybindsToSave[animName] = keyCode.Name -- Save KeyCode as String
    end
    local success, encodedKeybinds = pcall(HttpService:JSONEncode(keybindsToSave))
    if success then
        local saveSuccess, errorMessage = pcall(function()
            writefile("animation_keybinds.json", encodedKeybinds) -- Changed to writefile and new filename
        end)
        if not saveSuccess then
            warn("Error saving keybinds:", errorMessage)
        end
    else
        warn("Error encoding keybinds:", encodedKeybinds)
    end
end

-- NEW: Function to load animation keybinds from a file
local function loadKeybinds()
    local success, fileContent = pcall(readfile, "animation_keybinds.json")
    if success then
        local decodeSuccess, decodedKeybinds = pcall(HttpService:JSONDecode(fileContent))
        if decodeSuccess and typeof(decodedKeybinds) == "table" then
            for animName, keyName in pairs(decodedKeybinds) do
                animationKeybinds[animName] = Enum.KeyCode[keyName] -- Convert String back to KeyCode
            end
            print("Keybinds loaded successfully.")
        else
            warn("Error decoding keybinds:", decodedKeybinds)
            animationKeybinds = {}
        end
    else
        warn("No keybinds file found, starting with empty keybinds:", fileContent)
        animationKeybinds = {}
    end
end


-- Helper function to scale a CFrame uniformly (keeps rotation)
local function scaleCFrame(cf, scale)
    local pos = cf.Position * scale
    local xRot, yRot, zRot = cf:ToEulerAnglesXYZ()
    return CFrame.new(pos) * CFrame.Angles(xRot, yRot, zRot)
end

-- Function that moves the clone so its lowest point (Y-coordinate) is at 0
local function adjustCloneToGround(clone)
    if not clone then return end
    local lowestY = math.huge
    for _, part in ipairs(clone:GetDescendants()) do
        if part:IsA("BasePart") then
            local bottomY = part.Position.Y - (part.Size.Y / 2)
            if bottomY < lowestY then
                lowestY = bottomY
            end
        end
    end
    local groundY = 0
    local offset = groundY - lowestY
    if offset > 0 then
        if clone.PrimaryPart then
            clone:SetPrimaryPartCFrame(clone.PrimaryPart.CFrame + Vector3.new(0, offset, 0))
        else
            clone:TranslateBy(Vector3.new(0, offset, 0))
        end
    end
end

-- Functions to temporarily preserve GUIs (ResetOnSpawn)
local preservedGuis = {}
local function preserveGuis()
    local playerGui = LocalPlayer:FindFirstChildWhichIsA("PlayerGui")
    if playerGui then
        for _, gui in ipairs(playerGui:GetChildren()) do
            if gui:IsA("ScreenGui") and gui.ResetOnSpawn then
                table.insert(preservedGuis, gui)
                gui.ResetOnSpawn = false
            end
        end
    end
end

local function restoreGuis()
    for _, gui in ipairs(preservedGuis) do
        gui.ResetOnSpawn = true
    end
    table.clear(preservedGuis)
end

-- Function to update the clone’s scale using both cloneSize (uniform scaling)
-- and cloneWidth (extra scaling only on the X-axis).
local function updateCloneScale()
    if not ghostClone then return end
    for part, origSize in pairs(ghostOriginalSizes) do
        if part and part:IsA("BasePart") then
            part.Size = Vector3.new(origSize.X * cloneSize * cloneWidth, origSize.Y * cloneSize, origSize.Z * cloneSize)
        end
    end
    for motor, orig in pairs(ghostOriginalMotorCFrames) do
        if motor and motor:IsA("Motor6D") then
            local c0 = orig.C0
            local c1 = orig.C1
            local newC0 = CFrame.new(
                c0.Position.X * cloneSize * cloneWidth,
                c0.Position.Y * cloneSize,
                c0.Position.Z * cloneSize
            ) * CFrame.Angles(c0:ToEulerAnglesXYZ())
            local newC1 = CFrame.new(
                c1.Position.X * cloneSize * cloneWidth,
                c1.Position.Y * cloneSize,
                c1.Position.Z * cloneSize
            ) * CFrame.Angles(c1:ToEulerAnglesXYZ())
            motor.C0 = newC0
            motor.C1 = newC1
        end
    end

    local ghostHumanoid = ghostClone:FindFirstChildWhichIsA("Humanoid")
    if ghostHumanoid and ghostOriginalHipHeight then
        ghostHumanoid.HipHeight = ghostOriginalHipHeight * cloneSize
    end

    adjustCloneToGround(ghostClone)
end

-- Function to update the clone’s transparency (fully invisible)
local function updateCloneTransparency()
    if not ghostClone then return end
    for _, part in pairs(ghostClone:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Transparency = 1
        end
    end
    local head = ghostClone:FindFirstChild("Head")
    if head then
        for _, child in ipairs(head:GetChildren()) do
            if child:IsA("Decal") then
                child.Transparency = 1
            end
        end
    end
end

-- Function to synchronize the ragdolled body parts
local function updateRagdolledParts()
    if not ghostEnabled or not originalCharacter or not ghostClone then return end
    for _, partName in ipairs(bodyParts) do
        local originalPart = originalCharacter:FindFirstChild(partName)
        local clonePart = ghostClone:FindFirstChild(partName)
        if originalPart and clonePart then
            originalPart.CFrame = clonePart.CFrame
            originalPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
            originalPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
        end
    end
end

-- Function to enable/disable ghost mode
local function setGhostEnabled(newState)
    ghostEnabled = newState

    if ghostEnabled then
        local char = LocalPlayer.Character
        if not char then
            warn("No character found!")
            return
        end

        local humanoid = char:FindFirstChildWhichIsA("Humanoid")
        local root = char:FindFirstChild("HumanoidRootPart")
        if not humanoid or not root then
            warn("Character is missing either Humanoid or HumanoidRootPart!")
            return
        end

        originalCharacter = char
        originalCFrame = root.CFrame

        char.Archivable = true
        ghostClone = char:Clone()
        char.Archivable = false

        local originalName = originalCharacter.Name
        ghostClone.Name = originalName .. "_clone"

        local ghostHumanoid = ghostClone:FindFirstChildWhichIsA("Humanoid")
        if ghostHumanoid then
            ghostHumanoid.DisplayName = originalName .. "_clone"
            ghostOriginalHipHeight = ghostHumanoid.HipHeight
        end

        if not ghostClone.PrimaryPart then
            local hrp = ghostClone:FindFirstChild("HumanoidRootPart")
            if hrp then
                ghostClone.PrimaryPart = hrp
            end
        end

        for _, part in ipairs(ghostClone:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Transparency = 1
            end
        end
        local head = ghostClone:FindFirstChild("Head")
        if head then
            for _, child in ipairs(head:GetChildren()) do
                if child:IsA("Decal") then
                    child.Transparency = 1
                end
            end
        end

        ghostOriginalSizes = {}
        ghostOriginalMotorCFrames = {}
        for _, desc in ipairs(ghostClone:GetDescendants()) do
            if desc:IsA("BasePart") then
                ghostOriginalSizes[desc] = desc.Size
            elseif desc:IsA("Motor6D") then
                ghostOriginalMotorCFrames[desc] = { C0 = desc.C0, C1 = desc.C1 }
            end
        end

        if cloneSize ~= 1 or cloneWidth ~= 1 then
            updateCloneScale()
        end

        local animate = originalCharacter:FindFirstChild("Animate")
        if animate then
            originalAnimateScript = animate
            originalAnimateScript.Disabled = true
            originalAnimateScript.Parent = ghostClone
        end

        preserveGuis()
        ghostClone.Parent = originalCharacter.Parent

        adjustCloneToGround(ghostClone)

        LocalPlayer.Character = ghostClone
        if ghostHumanoid then
            Workspace.CurrentCamera.CameraSubject = ghostHumanoid
        end
        restoreGuis()

        if originalAnimateScript then
            originalAnimateScript.Disabled = false
        end

        task.delay(0, function() -- Changed delay to 0
            if not ghostEnabled then return end
            ReplicatedStorage.RagdollEvent:FireServer()
            task.delay(0, function()
                if not ghostEnabled then return end
                if updateConnection then updateConnection:Disconnect() end
                updateConnection = RunService.Heartbeat:Connect(updateRagdolledParts)
            end)
        end)

    else
        if updateConnection then
            updateConnection:Disconnect()
            updateConnection = nil
        end

        if not originalCharacter or not ghostClone then return end

        for i = 1, 3 do
            ReplicatedStorage.UnragdollEvent:FireServer()
            task.wait(0.1)
        end

        local origRoot = originalCharacter:FindFirstChild("HumanoidRootPart")
        local ghostRoot = ghostClone:FindFirstChild("HumanoidRootPart")
        local targetCFrame = ghostRoot and ghostRoot.CFrame or originalCFrame

        local animate = ghostClone:FindFirstChild("Animate")
        if animate then
            animate.Disabled = true
            animate.Parent = originalCharacter
        end

        ghostClone:Destroy()

        if origRoot then
            origRoot.CFrame = targetCFrame
        end

        local origHumanoid = originalCharacter:FindFirstChildWhichIsA("Humanoid")
        preserveGuis()
        LocalPlayer.Character = originalCharacter
        if origHumanoid then
            Workspace.CurrentCamera.CameraSubject = origHumanoid
        end
        restoreGuis()

        if animate then
            task.wait(0.1)
            animate.Disabled = false
        end

        cloneSize = 1
        cloneWidth = 1
    end
end

-- NEW SECTION: Fake Animation on Ghost (Fake) Character --
local fakeAnimStop
local function stopFakeAnimation()
    fakeAnimStop = true
    fakeAnimRunning = false -- Ensure the loop breaks
    for i,script in pairs(ghostClone:GetChildren()) do
        if script:IsA("LocalScript") and script.Enabled == false then
            script.Enabled=true
        end
    end
    -- Reset body parts to original positions
    if ghostClone then
        for motor, orig in pairs(ghostOriginalMotorCFrames) do
            if motor and motor:IsA("Motor6D") then
                motor.C0 = orig.C0
                motor.C1 = orig.C1
            end
        end

        -- Reset velocity on all body parts
        for _, partName in ipairs(bodyParts) do
            local part = ghostClone:FindFirstChild(partName)
            if part and part:IsA("BasePart") then
                part.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                part.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
            end
        end
    end
end
local fakeAnimRunning = false
fakeAnimStop = false
local fakeAnimSpeed = 1.1 -- Default speed (1.0 = 100%)
local function playFakeAnimation(animationId)
    if not ghostClone then
        warn("No fake character available!")
        return
    end
    if animationId == "" then return end
    if fakeAnimRunning then
        stopFakeAnimation()
    end
    wait(0.1)
    -- Reset ghostClone scaling so it's at its original size
    cloneSize = 1
    cloneWidth = 1    updateCloneScale()

    -- Reset joints to original values before applying animation transforms
    for motor, orig in pairs(ghostOriginalMotorCFrames) do
        motor.C0 = orig.C0
    end

    local success, NeededAssets = pcall(function()
        return game:GetObjects("rbxassetid://" .. animationId)[1]
    end)
    if not success or not NeededAssets then
        warn("Invalid Animation ID.")
        return
    end

    -- Get the joints from ghostClone (assuming an R15 rig)
    local character = ghostClone
    local rootPart = character:WaitForChild("HumanoidRootPart")
    local head = character:WaitForChild("Head")
    local leftFoot = character:WaitForChild("LeftFoot")
    local leftHand = character:WaitForChild("LeftHand")
    local leftLowerArm = character:WaitForChild("LeftLowerArm")
    local leftLowerLeg = character:WaitForChild("LeftLowerLeg")
    local leftUpperArm = character:WaitForChild("LeftUpperArm")
    local leftUpperLeg = character:WaitForChild("LeftUpperLeg")
    local lowerTorso = character:WaitForChild("LowerTorso")
    local rightFoot = character:WaitForChild("RightFoot")
    local rightHand = character:WaitForChild("RightHand")
    local rightLowerArm = character:WaitForChild("RightLowerArm")
    local rightLowerLeg = character:WaitForChild("RightLowerLeg")
    local rightUpperArm = character:WaitForChild("RightUpperArm")
    local rightUpperLeg = character:WaitForChild("RightUpperLeg")
    local upperTorso = character:WaitForChild("UpperTorso")

    local Joints = {
        ["Torso"] = rootPart:FindFirstChild("RootJoint"),
        ["Head"] = head:FindFirstChild("Neck"),
        ["LeftUpperArm"] = leftUpperArm:FindFirstChild("LeftShoulder"),
        ["RightUpperArm"] = rightUpperArm:FindFirstChild("RightShoulder"),
        ["LeftUpperLeg"] = leftUpperLeg:FindFirstChild("LeftHip"),
        ["RightUpperLeg"] = rightUpperLeg:FindFirstChild("RightHip"),
        ["LeftFoot"] = leftFoot:FindFirstChild("LeftAnkle"),
        ["RightFoot"] = rightFoot:FindFirstChild("RightAnkle"),
        ["LeftHand"] = leftHand:FindFirstChild("LeftWrist"),
        ["RightHand"] = rightHand:FindFirstChild("RightWrist"),
        ["LeftLowerArm"] = leftLowerArm:FindFirstChild("LeftElbow"),
        ["RightLowerArm"] = rightLowerArm:FindFirstChild("RightElbow"),
        ["LeftLowerLeg"] = leftLowerLeg:FindFirstChild("LeftKnee"),
        ["RightLowerLeg"] = rightLowerLeg:FindFirstChild("RightKnee"),
        ["LowerTorso"] = lowerTorso:FindFirstChild("Root"),
        ["UpperTorso"] = upperTorso:FindFirstChild("Waist"),
    }
    
    fakeAnimStop = false
    fakeAnimRunning = true
    
    local part = Instance.new("Part")
    part.Size = Vector3.new(2048,0.1,2048)
    part.Anchored = true
    part.Position = game.Players.LocalPlayer.Character.LowerTorso.Position + Vector3.new(0,-0.2,0)
    part.Transparency = 1
    part.Parent = workspace
    game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true
    wait(0.1)
    for i,script in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
        if script:IsA("LocalScript") and script.Enabled then
            script.Enabled=false
        end
    end
    game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
    part:Destroy()
    spawn(function()
        while fakeAnimRunning do
        if fakeAnimStop then
            fakeAnimRunning = false
            break
        end

        pcall(function() -- Add pcall to handle errors gracefully
            local keyframes = NeededAssets:GetKeyframes()
            for ii = 1, #keyframes do
            if fakeAnimStop then break end

            local currentFrame = keyframes[ii]
            local nextFrame = keyframes[ii + 1] or keyframes[1] -- Loop back to first frame
            local currentTime = currentFrame.Time
            local nextTime = nextFrame.Time
            if nextTime <= currentTime then
                nextTime = nextTime + NeededAssets.Length
            end

            local frameLength = (nextTime - currentTime) / fakeAnimSpeed
            local startTime = tick()
            
            while tick() - startTime < frameLength and not fakeAnimStop do
                local alpha = (tick() - startTime) / frameLength
                
                pcall(function() -- Add nested pcall for pose updates
                for _, currentPose in pairs(currentFrame:GetDescendants()) do
                    local nextPose = nextFrame:FindFirstChild(currentPose.Name, true)
                    local motor = Joints[currentPose.Name]
                    
                    if motor and nextPose and ghostOriginalMotorCFrames[motor] then
                    local currentCF = ghostOriginalMotorCFrames[motor].C0 * currentPose.CFrame
                    local nextCF = ghostOriginalMotorCFrames[motor].C0 * nextPose.CFrame
                    motor.C0 = currentCF:Lerp(nextCF, alpha)
                    end
                end
                end)
                
                RunService.RenderStepped:Wait()
            end
            end
        end)
        
        -- Small delay to prevent tight loops if errors occur
        wait(0.03)
        end
    end)
    end
-- End of Fake Animation Section

-- NEW: Function to update Keybind Button Text
local function updateKeybindButtonText(animButtonData, animName)
    local keybind = animationKeybinds[animName]
    if keybind then
        animButtonData.KeybindButton.Text = keybind.Name -- Display KeyCode Name
    else
        animButtonData.KeybindButton.Text = "Key"
    end
end


-- Function to create the separate Animation List GUI
local function createAnimationListGui(animTextBox)
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AnimationListGui"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    loadFavorites() -- Load favorites when GUI is created
    loadKeybinds() -- Load keybinds when GUI is created

    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 330, 0, 400) -- Less wide here, changed from `UDim2.new(0, 350, 0, 400)` to `UDim2.new(0, 330, 0, 400)`
    mainFrame.Position = UDim2.new(0.75, -175, 0.5, -200) -- Position to the right of main GUI
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    mainFrame.BorderSizePixel = 0
    local uiCorner = Instance.new("UICorner") -- Rounded corner for mainFrame
    uiCorner.CornerRadius = UDim.new(0, 10)
    uiCorner.Parent = mainFrame
    mainFrame.Parent = screenGui

    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 50) -- Increased height of titleBar here
    titleBar.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
    titleBar.BorderSizePixel = 0
    local titleCorner = Instance.new("UICorner") -- Rounded corner for titleBar
    titleCorner.CornerRadius = UDim.new(0, 10)
    titleCorner.Parent = titleBar
    titleBar.Parent = mainFrame

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, -50, 1, 0)
    titleLabel.Position = UDim2.new(0, 25, 0, 0)
    titleLabel.Text = "Animation List"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 18
    titleLabel.Font = Enum.Font.GothamSemibold
    titleLabel.BackgroundTransparency = 1
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar

    -- Close Button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -35, 0, 10) -- Adjusted position to be vertically centered in the wider title bar
    closeButton.Text = ""
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextSize = 18
    closeButton.Font = Enum.Font.GothamSemibold
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 85, 85)
    closeButton.BackgroundTransparency = 0.5
    closeButton.AutoButtonColor = true
    local closeCorner = Instance.new("UICorner") -- Rounded corner for closeButton
    closeCorner.CornerRadius = UDim.new(0, 8)
    closeCorner.Parent = closeButton
    closeButton.Parent = titleBar

    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)

    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "Content"
    contentFrame.Size = UDim2.new(1, -20, 1, -60) -- Adjusted height to account for wider title bar
    contentFrame.Position = UDim2.new(0, 10, 0, 55) -- Adjusted position to account for wider title bar
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = mainFrame

    -- ADDED: Search TextBox
    local animSearchTextBox = Instance.new("TextBox")
    animSearchTextBox.Name = "AnimSearchTextBox"
    animSearchTextBox.Text = ""
    animSearchTextBox.Size = UDim2.new(1, 0, 0, 30)
    animSearchTextBox.Position = UDim2.new(0, 0, 0, 0)
    animSearchTextBox.PlaceholderText = "Search Animations..."
    animSearchTextBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    animSearchTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    animSearchTextBox.ClearTextOnFocus = false
    local animSearchTextBoxCorner = Instance.new("UICorner") -- Rounded corner for animSearchTextBox
    animSearchTextBoxCorner.CornerRadius = UDim.new(0, 6)
    animSearchTextBoxCorner.Parent = animSearchTextBox
    animSearchTextBox.Parent = contentFrame

    local animScrollFrame = Instance.new("ScrollingFrame")
    animScrollFrame.Name = "AnimScrollFrame"
    animScrollFrame.Size = UDim2.new(1, 0, 1, -40) -- Take up remaining space
    animScrollFrame.Position = UDim2.new(0, 0, 0, 35)
    animScrollFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    animScrollFrame.BorderSizePixel = 0
    animScrollFrame.ScrollBarThickness = 6
    animScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    local scrollFrameCorner = Instance.new("UICorner") -- Rounded corner for animScrollFrame
    scrollFrameCorner.CornerRadius = UDim.new(0, 6)
    scrollFrameCorner.Parent = animScrollFrame
    animScrollFrame.Parent = contentFrame

    -- Table to store animation buttons for search functionality
    local animationButtons = {}
    local keybindInputActive = false
    local currentAnimationForKeybind = nil

    -- Function to update animation button visibility based on search text and favorites
    local function updateAnimationButtonsVisibility(searchText)
        local yOffset = 5
        local visibleButtonCount = 0

        -- Sort animations: Favorites first, then alphabetically
        local sortedAnimationNames = {}
        local favoriteNames = {}
        local nonFavoriteNames = {}

        for animName in pairs(BuiltInAnimationsR15) do
            if favoriteAnimations[animName] then
                table.insert(favoriteNames, animName)
            else
                table.insert(nonFavoriteNames, animName)
            end
        end
        table.sort(favoriteNames)
        table.sort(nonFavoriteNames)
        for _, name in ipairs(favoriteNames) do
            table.insert(sortedAnimationNames, name)
        end
        for _, name in ipairs(nonFavoriteNames) do
            table.insert(sortedAnimationNames, name)
        end


        for _, animName in ipairs(sortedAnimationNames) do -- Iterate through sorted names
            local animButtonData = animationButtons[animName]
            if not animButtonData then continue end -- Safety check

            if string.find(string.lower(animName), string.lower(searchText)) then
                animButtonData.NameButton.Visible = true
                animButtonData.PlayButton.Visible = true
                animButtonData.FavoriteButton.Visible = true -- Show Favorite Button
                animButtonData.StopButton.Visible = true -- Show Stop Button
                animButtonData.KeybindButton.Visible = true -- Show Keybind Button
                animButtonData.NameButton.Position = UDim2.new(0, 5, 0, yOffset)
                animButtonData.PlayButton.Position = UDim2.new(0, 5, 0, yOffset + 30)
                animButtonData.FavoriteButton.Position = UDim2.new(1, -125, 0, yOffset) -- Position Favorite button right of NameButton - Adjusted for wider Keybind button, changed from `UDim2.new(1, -145, 0, yOffset)` to `UDim2.new(1, -125, 0, yOffset)`
                animButtonData.StopButton.Position = UDim2.new(1, -85, 0, yOffset) -- Position Stop button right of Favorite Button - Adjusted for wider Keybind button, changed from `UDim2.new(1, -105, 0, yOffset)` to `UDim2.new(1, -85, 0, yOffset)`
                animButtonData.KeybindButton.Position = UDim2.new(1, -45, 0, yOffset) -- Position Keybind button right of Stop Button - Adjusted for wider Keybind button, changed from `UDim2.new(1, -65, 0, yOffset)` to `UDim2.new(1, -45, 0, yOffset)`
                yOffset = yOffset + 65
                visibleButtonCount = visibleButtonCount + 1

                -- Highlight favorite animations visually
                if favoriteAnimations[animName] then
                    animButtonData.NameButton.BackgroundColor3 = Color3.fromRGB(80, 70, 90) -- Different background for favorites
                else
                    animButtonData.NameButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
                end
                updateKeybindButtonText(animButtonData, animName) -- Update Keybind Button Text

            else
                animButtonData.NameButton.Visible = false
                animButtonData.PlayButton.Visible = false
                animButtonData.FavoriteButton.Visible = false -- Hide Favorite Button too
                animButtonData.StopButton.Visible = false -- Hide Stop Button too
                animButtonData.KeybindButton.Visible = false -- Hide Keybind Button too
            end
        end
        animScrollFrame.CanvasSize = UDim2.new(0, 0, 0, math.max(0, yOffset - 60 + 5))
    end

    -- Create buttons for each animation in the BuiltInAnimationsR15 table
    for animName, animId in pairs(BuiltInAnimationsR15) do
        local animNameButton = Instance.new("TextButton")
        animNameButton.Name = animName .. "NameButton"
        animNameButton.Size = UDim2.new(1, -80, 0, 30) -- Wider button for title - Adjusted for wider Keybind button - Changed here from `UDim2.new(1, -100, 0, 30)` to `UDim2.new(1, -80, 0, 30)`
        animNameButton.Position = UDim2.new(0, 5, 0, 5) -- Initial position, updated by search function
        animNameButton.Text = animName
        animNameButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        animNameButton.TextSize = 14
        animNameButton.Font = Enum.Font.GothamMedium
        animNameButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
        animNameButton.BorderSizePixel = 0
        animNameButton.TextXAlignment = Enum.TextXAlignment.Center -- Centered Text Here
        local buttonCorner = Instance.new("UICorner") -- Rounded corner for animNameButton
        buttonCorner.CornerRadius = UDim.new(0, 4)
        buttonCorner.Parent = animNameButton
        animNameButton.Parent = animScrollFrame

        -- When clicked, set the animation ID in the textbox of the main GUI
        animNameButton.MouseButton1Click:Connect(function()
            animTextBox.Text = tostring(animId)
        end)

        -- Play Animation Button
        local playAnimButton = Instance.new("TextButton")
        playAnimButton.Name = animName .. "PlayButton"
        playAnimButton.Size = UDim2.new(1, -10, 0, 30) -- Same size as name button for now
        playAnimButton.Position = UDim2.new(0, 5, 0, 35) -- Position below the name button
        playAnimButton.Text = "Play" -- Shorter text
        playAnimButton.TextColor3 = Color3.fromRGB(200, 200, 200) -- Slightly different color
        playAnimButton.TextSize = 12 -- Smaller text size
        playAnimButton.Font = Enum.Font.GothamMedium
        playAnimButton.BackgroundColor3 = Color3.fromRGB(70, 70, 80) -- Slightly darker background
        playAnimButton.BorderSizePixel = 0
        local playButtonCorner = Instance.new("UICorner")
        playButtonCorner.CornerRadius = UDim.new(0, 4)
        playButtonCorner.Parent = playAnimButton
        playAnimButton.Parent = animScrollFrame

        playAnimButton.MouseButton1Click:Connect(function()
            playFakeAnimation(tostring(animId)) -- Call playFakeAnimation with the ID
        end)

        -- Favorite Animation Button
        local favoriteAnimButton = Instance.new("TextButton")
        favoriteAnimButton.Name = animName .. "FavoriteButton"
        favoriteAnimButton.Size = UDim2.new(0, 40, 0, 30) -- Smaller button for favorite
        favoriteAnimButton.Position = UDim2.new(1, -125, 0, 5) -- Position Favorite button right of NameButton - Adjusted for wider Keybind button, changed from `UDim2.new(1, -145, 0, 5)` to `UDim2.new(1, -125, 0, 5)`
        favoriteAnimButton.Text = favoriteAnimations[animName] and "★" or "☆" -- Filled star if favorite, otherwise empty
        favoriteAnimButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        favoriteAnimButton.TextSize = 20
        favoriteAnimButton.Font = Enum.Font.GothamBold
        favoriteAnimButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
        favoriteAnimButton.BorderSizePixel = 0
        local favoriteButtonCorner = Instance.new("UICorner")
        favoriteButtonCorner.CornerRadius = UDim.new(0, 4)
        favoriteButtonCorner.Parent = favoriteAnimButton
        favoriteAnimButton.Parent = animScrollFrame

        favoriteAnimButton.MouseButton1Click:Connect(function()
            if favoriteAnimations[animName] then
                favoriteAnimations[animName] = nil -- Remove from favorites
            else
                favoriteAnimations[animName] = true -- Add to favorites
            end
            favoriteAnimButton.Text = favoriteAnimations[animName] and "★" or "☆" -- Update button text
            updateAnimationButtonsVisibility(animSearchTextBox.Text) -- Refresh list to re-sort
            saveFavorites() -- Save favorites after change
        end)

        -- Stop Animation Button
        local stopAnimButton = Instance.new("TextButton")
        stopAnimButton.Name = animName .. "StopButton"
        stopAnimButton.Size = UDim2.new(0, 40, 0, 30) -- Smaller button for stop
        stopAnimButton.Position = UDim2.new(1, -85, 0, 5) -- Position Stop button right of Favorite Button - Adjusted for wider Keybind button, changed from `UDim2.new(1, -105, 0, 5)` to `UDim2.new(1, -85, 0, 5)`
        stopAnimButton.Text = "🛑"
        stopAnimButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        stopAnimButton.TextSize = 16
        stopAnimButton.Font = Enum.Font.GothamBold
        stopAnimButton.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
        stopAnimButton.BorderSizePixel = 0
        local stopButtonCorner = Instance.new("UICorner")
        stopButtonCorner.CornerRadius = UDim.new(0, 4)
        stopButtonCorner.Parent = stopAnimButton
        stopAnimButton.Parent = animScrollFrame

        stopAnimButton.MouseButton1Click:Connect(function()
            stopFakeAnimation() -- Call stopFakeAnimation function
        end)

        -- NEW: Keybind Animation Button
        local keybindAnimButton = Instance.new("TextButton")
        keybindAnimButton.Name = animName .. "KeybindButton"
        keybindAnimButton.Size = UDim2.new(0, 40, 0, 30) -- Wider button for keybind - Increased width here, changed from `UDim2.new(0, 60, 0, 30)` to `UDim2.new(0, 40, 0, 30)`
        keybindAnimButton.Position = UDim2.new(1, -45, 0, 5) -- Position Keybind button right of Stop Button - Adjusted for wider Keybind button, changed from `UDim2.new(1, -65, 0, 5)` to `UDim2.new(1, -45, 0, 5)`
        keybindAnimButton.Text = "Set Keybind" -- Initial text
        keybindAnimButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        keybindAnimButton.TextSize = 12
        keybindAnimButton.Font = Enum.Font.GothamMedium
        keybindAnimButton.BackgroundColor3 = Color3.fromRGB(70, 70, 80)
        keybindAnimButton.BorderSizePixel = 0
        local keybindButtonCorner = Instance.new("UICorner")
        keybindButtonCorner.CornerRadius = UDim.new(0, 4)
        keybindButtonCorner.Parent = keybindAnimButton
        keybindAnimButton.Parent = animScrollFrame

        keybindAnimButton.MouseButton1Click:Connect(function()
            if keybindInputActive then return end -- Prevent overlapping keybind inputs
            keybindInputActive = true
            currentAnimationForKeybind = animName
            keybindAnimButton.Text = "Press" -- Prompt user to press a key

            local function inputBeganHandler(input, gameProcessedEvent)
                if not keybindInputActive or currentAnimationForKeybind ~= animName then return end
                if input.UserInputType == Enum.UserInputType.Keyboard then
                    animationKeybinds[animName] = input.KeyCode
                    saveKeybinds()
                    updateKeybindButtonText(animationButtons[animName], animName)
                    keybindInputActive = false
                    currentAnimationForKeybind = nil
                    UserInputService.InputBegan:Disconnect(inputBeganHandler) -- Disconnect after setting keybind
                elseif input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    -- Allow canceling keybind setting by clicking away
                    updateKeybindButtonText(animationButtons[animName], animName) -- Revert text
                    keybindInputActive = false
                    currentAnimationForKeybind = nil
                    UserInputService.InputBegan:Disconnect(inputBeganHandler)
                end
            end

            UserInputService.InputBegan:Connect(inputBeganHandler)
        end)


        animationButtons[animName] = {
            NameButton = animNameButton,
            PlayButton = playAnimButton,
            FavoriteButton = favoriteAnimButton,
            StopButton = stopAnimButton,
            KeybindButton = keybindAnimButton -- NEW: Keybind Button
        }
    end

    -- Initially update button visibility to show all animations
    updateAnimationButtonsVisibility("")

    -- Update button visibility when search text changes
    animSearchTextBox:GetPropertyChangedSignal("Text"):Connect(function()
        updateAnimationButtonsVisibility(animSearchTextBox.Text)
    end)

    -- Drag functionality for the Animation List GUI
    local dragging = false
    local dragInput, dragStart, startPos
    local function updateInput(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input == dragInput) then
            updateInput(input)
        end
    end)

    return screenGui
end

local animationListGui = nil -- Variable to track if animation list is open

-- Creates a draggable GUI with a compact layout.
local function createDraggableGui(getGhostEnabled, toggleGhost, getSizeValue, setSizeValue, getWidthValue, setWidthValue)
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "EnhancedGhostGui"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 350, 0, 250)  -- Increased height to accommodate speed slider
    mainFrame.Position = UDim2.new(0.5, -175, 0.5, -225)  -- Adjusted position for taller size
    mainFrame.BackgroundColor3 = Color3.fromRGB(16,12,12)
    mainFrame.BorderSizePixel = 0
    mainFrame.BackgroundTransparency = 0
    local uiCorner = Instance.new("UICorner") -- Rounded corner for mainFrame
    uiCorner.CornerRadius = UDim.new(0, 10)
    uiCorner.Parent = mainFrame
    mainFrame.Parent = screenGui

    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 40)
    titleBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    titleBar.BorderSizePixel = 0
    local titleCorner = Instance.new("UICorner") -- Rounded corner for titleBar
    titleCorner.CornerRadius = UDim.new(0, 10)
    titleCorner.Parent = titleBar
    titleBar.Parent = mainFrame

    local titleBarBottom = Instance.new("Frame")
    titleBarBottom.Name = "BottomEdge"
    titleBarBottom.Size = UDim2.new(1, 0, 0, 10)
    titleBarBottom.Position = UDim2.new(0, 0, 1, -10)
    titleBarBottom.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    titleBarBottom.BorderSizePixel = 0
    titleBarBottom.ZIndex = 0
    titleBarBottom.Parent = titleBar

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, -100, 1, 0)
    titleLabel.Position = UDim2.new(0, 41, 0, 0)
    titleLabel.Text = "Animation ID Loader | MIC UP"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 18
    titleLabel.Font = Enum.Font.GothamSemibold
    titleLabel.BackgroundTransparency = 1
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar

    -- Minimize Button
    local minimizeButton = Instance.new("TextButton") -- Added Minimize Button
    minimizeButton.Name = "MinimizeButton"
    minimizeButton.Size = UDim2.new(0, 30, 0, 30)
    minimizeButton.Position = UDim2.new(1, -65, 0, 5) -- Position next to close button
    minimizeButton.Text = "-" -- Minimize Icon (you can use an image instead)
    minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    minimizeButton.TextSize = 24
    minimizeButton.Font = Enum.Font.GothamSemibold
    minimizeButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    minimizeButton.BackgroundTransparency = 0.5
    minimizeButton.AutoButtonColor = true
    local minimizeCorner = Instance.new("UICorner") -- Rounded corner for minimizeButton
    minimizeCorner.CornerRadius = UDim.new(0, 8)
    minimizeCorner.Parent = minimizeButton
    minimizeButton.Parent = titleBar

    -- Close Button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -35, 0, 5)
    closeButton.Text = "X"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextSize = 18
    closeButton.Font = Enum.Font.GothamSemibold
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 85, 85)
    closeButton.BackgroundTransparency = 0.5
    closeButton.AutoButtonColor = true
    local closeCorner = Instance.new("UICorner") -- Rounded corner for closeButton
    closeCorner.CornerRadius = UDim.new(0, 8)
    closeCorner.Parent = closeButton
    closeButton.Parent = titleBar

    -- Content Frame
    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "Content"
    contentFrame.Size = UDim2.new(1, -20, 1, -50)
    contentFrame.Position = UDim2.new(0, 10, 0, 45)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = mainFrame

    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(1, 0, 0, 40)
    toggleButton.Position = UDim2.new(0, 0, 0, 0)
    toggleButton.Text = "Enable Reanimation"
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.TextSize = 16
    toggleButton.Font = Enum.Font.GothamSemibold
    toggleButton.BackgroundColor3 = Color3.fromRGB(76, 175, 80)
    toggleButton.BorderSizePixel = 0
    toggleButton.AutoButtonColor = true
    local toggleCorner = Instance.new("UICorner") -- Rounded corner for toggleButton
    toggleCorner.CornerRadius = UDim.new(0, 8)
    toggleCorner.Parent = toggleButton
    toggleButton.Parent = contentFrame

    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)

    -- Minimize Logic ---
    local originalGuiHeight = mainFrame.Size.Y.Offset -- Store initial height
    local minimizedGuiHeight = titleBar.Size.Y.Offset + 10 -- Height when minimized
    local minimized = false -- Track minimized state

    minimizeButton.MouseButton1Click:Connect(function() -- Minimize button functionality
        minimized = not minimized
        if minimized then
            contentFrame.Visible = false -- Hide content
            mainFrame.Size = UDim2.new(0, mainFrame.Size.X.Offset, 0, minimizedGuiHeight) -- Resize to minimized height
        else
            contentFrame.Visible = true -- Show content
            mainFrame.Size = UDim2.new(0, mainFrame.Size.X.Offset, 0, originalGuiHeight) -- Restore original height
        end
    end)
    -- End Minimize Logic ---


    toggleButton.MouseButton1Click:Connect(function()
        local newState = not getGhostEnabled()
        toggleGhost(newState)
        if newState then
            toggleButton.Text = "Disable Reanimation"
            toggleButton.BackgroundColor3 = Color3.fromRGB(211, 47, 47)
            updateSizeSlider(getSizeValue())
            updateWidthSlider(getWidthValue())
        else
            toggleButton.Text = "Enable Reanimation"
            toggleButton.BackgroundColor3 = Color3.fromRGB(76, 175, 80)
        end
    end)

    local dragging = false
    local dragInput, dragStart, startPos
    local function updateInput(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input == dragInput) then
            updateInput(input)
        end
    end)

    -- EXTRA SECTION: Animation Input & Buttons
    local fakeAnimSection = Instance.new("Frame")
    fakeAnimSection.Name = "FakeAnimSection"
    fakeAnimSection.Size = UDim2.new(1, 0, 0, 50)
    fakeAnimSection.Position = UDim2.new(0, 0, 0, 195) -- Position below width slider
    fakeAnimSection.BackgroundTransparency = 1
    fakeAnimSection.Parent = contentFrame

    local fakeAnimTextBox = Instance.new("TextBox")
    fakeAnimTextBox.Name = "FakeAnimTextBox"
    fakeAnimTextBox.Text = ""
    fakeAnimTextBox.Size = UDim2.new(1, 0, 0.8, 0)
    fakeAnimTextBox.Position = UDim2.new(0, 0, -3, 0)
    fakeAnimTextBox.PlaceholderText = "Animation ID"
    fakeAnimTextBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    fakeAnimTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    fakeAnimTextBox.TextSize = 13
    local fakeAnimTextBoxCorner = Instance.new("UICorner") -- Rounded corner for fakeAnimTextBox
    fakeAnimTextBoxCorner.CornerRadius = UDim.new(0, 6)
    fakeAnimTextBoxCorner.Parent = fakeAnimTextBox
    fakeAnimTextBox.Parent = fakeAnimSection

    local fakeAnimButton = Instance.new("TextButton")
    fakeAnimButton.Name = "FakeAnimButton"
    fakeAnimButton.Size = UDim2.new(1, 0, 0.8, 0)
    fakeAnimButton.Position = UDim2.new(0, 0, -2.1, 0)
    fakeAnimButton.Text = "Play Animation"
    fakeAnimButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    fakeAnimButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    fakeAnimButton.TextSize = 12.5
    local fakeAnimButtonCorner = Instance.new("UICorner") -- Rounded corner for fakeAnimButton
    fakeAnimButtonCorner.CornerRadius = UDim.new(0, 8)
    fakeAnimButtonCorner.Parent = fakeAnimButton
    fakeAnimButton.Parent = fakeAnimSection

    local stopFakeAnimButton = Instance.new("TextButton")
    stopFakeAnimButton.Name = "StopFakeAnimButton"
    stopFakeAnimButton.Size = UDim2.new(1, 0, 0.8, 0)
    stopFakeAnimButton.Position = UDim2.new(0, 0, -1.2, 0)
    stopFakeAnimButton.Text = "Stop Animation"
    stopFakeAnimButton.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
    stopFakeAnimButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    stopFakeAnimButton.TextSize = 12.5
    local stopFakeAnimButtonCorner = Instance.new("UICorner") -- Rounded corner for stopFakeAnimButton
    stopFakeAnimButtonCorner.CornerRadius = UDim.new(0, 8)
    stopFakeAnimButtonCorner.Parent = stopFakeAnimButton
    stopFakeAnimButton.Parent = fakeAnimSection

    fakeAnimButton.MouseButton1Click:Connect(function()
        if ghostClone then
            local animId = fakeAnimTextBox.Text
            playFakeAnimation(animId)
        else
            warn("No fake character available!")
        end
    end)

    stopFakeAnimButton.MouseButton1Click:Connect(function()
        stopFakeAnimation()
    end)

    return screenGui
end

local gui = createDraggableGui(
    function() return ghostEnabled end,
    setGhostEnabled,
    function() return cloneSize end,
    function(size)
        cloneSize = size
        if ghostEnabled and ghostClone then
            updateCloneScale()
        end
    end,
    function() return cloneWidth end,
    function(width)
        cloneWidth = width
        if ghostEnabled and ghostClone then
            updateCloneScale()
        end
    end
)
gui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- NEW: Keybind Handling outside GUI
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end -- Don't process if chat or other UI is using input
    if input.UserInputType == Enum.UserInputType.Keyboard then
        for animName, keyCode in pairs(animationKeybinds) do
            if input.KeyCode == keyCode then
             if fakeAnimRunning then
                 stopFakeAnimation() -- Stop any currently running animation
             else
                 playFakeAnimation(BuiltInAnimationsR15[animName])
             end
             return -- Stop checking after finding a match
            end
        end
    end
end)
