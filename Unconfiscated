Players = game:GetService("Players")
Workspace = game:GetService("Workspace")
UserInputService = game:GetService("UserInputService")
RunService = game:GetService("RunService")
ReplicatedStorage = game:GetService("ReplicatedStorage")
TweenService = game:GetService("TweenService")
LocalPlayer = Players.LocalPlayer
HttpService = game:GetService("HttpService")

local ghostEnabled = false
local originalCharacter
local ghostClone
local originalCFrame
local originalAnimateScript
local updateConnection
local ghostOriginalHipHeight
local cloneSize = 1
local cloneWidth = 1
local ghostOriginalSizes = {}
local ghostOriginalMotorCFrames = {}
local bodyParts = {
    "Head", "UpperTorso", "LowerTorso",
    "LeftUpperArm", "LeftLowerArm", "LeftHand",
    "RightUpperArm", "RightLowerArm", "RightHand",
    "LeftUpperLeg", "LeftLowerLeg", "LeftFoot",
    "RightUpperLeg", "RightLowerLeg", "RightFoot"
}
local animationKeybinds = {}

local function scaleCFrame(cf, scale)
    local pos = cf.Position * scale
    local xRot, yRot, zRot = cf:ToEulerAnglesXYZ()
    return CFrame.new(pos) * CFrame.Angles(xRot, yRot, zRot)
end

local function adjustCloneToGround(clone)
    if not clone then return end
    local lowestY = math.huge
    for _, part in ipairs(clone:GetDescendants()) do
        if part:IsA("BasePart") then
            local bottomY = part.Position.Y - (part.Size.Y / 2)
            if bottomY < lowestY then
                lowestY = bottomY
            end
        end
    end
    local groundY = 0
    local offset = groundY - lowestY
    if offset > 0 then
        if clone.PrimaryPart then
            clone:SetPrimaryPartCFrame(clone.PrimaryPart.CFrame + Vector3.new(0, offset, 0))
        else
            clone:TranslateBy(Vector3.new(0, offset, 0))
        end
    end
end

local preservedGuis = {}
local function preserveGuis()
    local playerGui = LocalPlayer:FindFirstChildWhichIsA("PlayerGui")
    if playerGui then
        for _, gui in ipairs(playerGui:GetChildren()) do
            if gui:IsA("ScreenGui") and gui.ResetOnSpawn then
                table.insert(preservedGuis, gui)
                gui.ResetOnSpawn = false
            end
        end
    end
end

local function restoreGuis()
    for _, gui in ipairs(preservedGuis) do
        gui.ResetOnSpawn = true
    end
    table.clear(preservedGuis)
end

local function updateCloneScale()
    if not ghostClone then return end
    for part, origSize in pairs(ghostOriginalSizes) do
        if part and part:IsA("BasePart") then
            part.Size = Vector3.new(origSize.X * cloneSize * cloneWidth, origSize.Y * cloneSize, origSize.Z * cloneSize)
        end
    end
    for motor, orig in pairs(ghostOriginalMotorCFrames) do
        if motor and motor:IsA("Motor6D") then
            local c0 = orig.C0
            local c1 = orig.C1
            local newC0 = CFrame.new(
                c0.Position.X * cloneSize * cloneWidth,
                c0.Position.Y * cloneSize,
                c0.Position.Z * cloneSize
            ) * CFrame.Angles(c0:ToEulerAnglesXYZ())
            local newC1 = CFrame.new(
                c1.Position.X * cloneSize * cloneWidth,
                c1.Position.Y * cloneSize,
                c1.Position.Z * cloneSize
            ) * CFrame.Angles(c1:ToEulerAnglesXYZ())
            motor.C0 = newC0
            motor.C1 = newC1
        end
    end

    local ghostHumanoid = ghostClone:FindFirstChildWhichIsA("Humanoid")
    if ghostHumanoid and ghostOriginalHipHeight then
        ghostHumanoid.HipHeight = ghostOriginalHipHeight * cloneSize
    end

    adjustCloneToGround(ghostClone)
end

local function updateCloneTransparency()
    if not ghostClone then return end
    for _, part in pairs(ghostClone:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Transparency = 1
        end
    end
    local head = ghostClone:FindFirstChild("Head")
    if head then
        for _, child in ipairs(head:GetChildren()) do
            if child:IsA("Decal") then
                child.Transparency = 1
            end
        end
    end
end

local function updateRagdolledParts()
    if not ghostEnabled or not originalCharacter or not ghostClone then return end
    for _, partName in ipairs(bodyParts) do
        local originalPart = originalCharacter:FindFirstChild(partName)
        local clonePart = ghostClone:FindFirstChild(partName)
        if originalPart and clonePart then
            originalPart.CFrame = clonePart.CFrame
            originalPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
            originalPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
        end
    end
end

local function setGhostEnabled(newState)
    ghostEnabled = newState

    if ghostEnabled then
        local char = LocalPlayer.Character
        if not char then
            warn("No character found!")
            return
        end

        local humanoid = char:FindFirstChildWhichIsA("Humanoid")
        local root = char:FindFirstChild("HumanoidRootPart")
        if not humanoid or not root then
            warn("Character is missing either Humanoid or HumanoidRootPart!")
            return
        end

        originalCharacter = char
        originalCFrame = root.CFrame

        char.Archivable = true
        ghostClone = char:Clone()
        char.Archivable = false

        local originalName = originalCharacter.Name
        ghostClone.Name = originalName .. "_clone"

        local ghostHumanoid = ghostClone:FindFirstChildWhichIsA("Humanoid")
        if ghostHumanoid then
            ghostHumanoid.DisplayName = originalName .. "_clone"
            ghostOriginalHipHeight = ghostHumanoid.HipHeight
        end

        if not ghostClone.PrimaryPart then
            local hrp = ghostClone:FindFirstChild("HumanoidRootPart")
            if hrp then
                ghostClone.PrimaryPart = hrp
            end
        end

        for _, part in ipairs(ghostClone:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Transparency = 1
            end
        end
        local head = ghostClone:FindFirstChild("Head")
        if head then
            for _, child in ipairs(head:GetChildren()) do
                if child:IsA("Decal") then
                    child.Transparency = 1
                end
            end
        end

        ghostOriginalSizes = {}
        ghostOriginalMotorCFrames = {}
        for _, desc in ipairs(ghostClone:GetDescendants()) do
            if desc:IsA("BasePart") then
                ghostOriginalSizes[desc] = desc.Size
            elseif desc:IsA("Motor6D") then
                ghostOriginalMotorCFrames[desc] = { C0 = desc.C0, C1 = desc.C1 }
            end
        end

        if cloneSize ~= 1 or cloneWidth ~= 1 then
            updateCloneScale()
        end

        local animate = originalCharacter:FindFirstChild("Animate")
        if animate then
            originalAnimateScript = animate
            originalAnimateScript.Disabled = true
            originalAnimateScript.Parent = ghostClone
        end

        preserveGuis()
        ghostClone.Parent = originalCharacter.Parent

        adjustCloneToGround(ghostClone)

        LocalPlayer.Character = ghostClone
        if ghostHumanoid then
            Workspace.CurrentCamera.CameraSubject = ghostHumanoid
        end
        restoreGuis()

        if originalAnimateScript then
            originalAnimateScript.Disabled = false
        end

        task.delay(0, function()
            if not ghostEnabled then return end
            ReplicatedStorage.RagdollEvent:FireServer()
            task.delay(0, function()
                if not ghostEnabled then return end
                if updateConnection then updateConnection:Disconnect() end
                updateConnection = RunService.Heartbeat:Connect(updateRagdolledParts)
            end)
        end)

    else
        if updateConnection then
            updateConnection:Disconnect()
            updateConnection = nil
        end

        if not originalCharacter or not ghostClone then return end

        for i = 1, 3 do
            ReplicatedStorage.UnragdollEvent:FireServer()
            task.wait(0.1)
        end

        local origRoot = originalCharacter:FindFirstChild("HumanoidRootPart")
        local ghostRoot = ghostClone:FindFirstChild("HumanoidRootPart")
        local targetCFrame = ghostRoot and ghostRoot.CFrame or originalCFrame

        local animate = ghostClone:FindFirstChild("Animate")
        if animate then
            animate.Disabled = true
            animate.Parent = originalCharacter
        end

        ghostClone:Destroy()

        if origRoot then
            origRoot.CFrame = targetCFrame
        end

        local origHumanoid = originalCharacter:FindFirstChildWhichIsA("Humanoid")
        preserveGuis()
        LocalPlayer.Character = originalCharacter
        if origHumanoid then
            Workspace.CurrentCamera.CameraSubject = origHumanoid
        end
        restoreGuis()

        if animate then
            task.wait(0.1)
            animate.Disabled = false
        end

        cloneSize = 1
        cloneWidth = 1
    end
end

-- NEW SECTION: Fake Animation on Ghost (Fake) Character --
local fakeAnimStop
local function stopFakeAnimation()
    fakeAnimStop = true
    fakeAnimRunning = false -- Ensure the loop breaks
    for i,script in pairs(ghostClone:GetChildren()) do
        if script:IsA("LocalScript") and script.Enabled == false then
            script.Enabled=true
        end
    end
    -- Reset body parts to original positions
    if ghostClone then
        for motor, orig in pairs(ghostOriginalMotorCFrames) do
            if motor and motor:IsA("Motor6D") then
                motor.C0 = orig.C0
                motor.C1 = orig.C1
            end
        end

        -- Reset velocity on all body parts
        for _, partName in ipairs(bodyParts) do
            local part = ghostClone:FindFirstChild(partName)
            if part and part:IsA("BasePart") then
                part.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                part.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
            end
        end
    end
end
local fakeAnimRunning = false
fakeAnimStop = false
local fakeAnimSpeed = 1.2 -- Default speed (1.0 = 100%)
local function playFakeAnimation(animationId)
    if not ghostClone then
        warn("No fake character available!")
        return
    end
    if animationId == "" then return end
    if fakeAnimRunning then
        stopFakeAnimation()
    end
    wait(0.1)
    -- Reset ghostClone scaling so it's at its original size
    cloneSize = 1
    cloneWidth = 1    updateCloneScale()

    -- Reset joints to original values before applying animation transforms
    for motor, orig in pairs(ghostOriginalMotorCFrames) do
        motor.C0 = orig.C0
    end

    local success, NeededAssets = pcall(function()
        return game:GetObjects("rbxassetid://" .. animationId)[1]
    end)
    if not success or not NeededAssets then
        warn("Invalid Animation ID.")
        return
    end

    -- Get the joints from ghostClone (assuming an R15 rig)
    local character = ghostClone
    local rootPart = character:WaitForChild("HumanoidRootPart")
    local head = character:WaitForChild("Head")
    local leftFoot = character:WaitForChild("LeftFoot")
    local leftHand = character:WaitForChild("LeftHand")
    local leftLowerArm = character:WaitForChild("LeftLowerArm")
    local leftLowerLeg = character:WaitForChild("LeftLowerLeg")
    local leftUpperArm = character:WaitForChild("LeftUpperArm")
    local leftUpperLeg = character:WaitForChild("LeftUpperLeg")
    local lowerTorso = character:WaitForChild("LowerTorso")
    local rightFoot = character:WaitForChild("RightFoot")
    local rightHand = character:WaitForChild("RightHand")
    local rightLowerArm = character:WaitForChild("RightLowerArm")
    local rightLowerLeg = character:WaitForChild("RightLowerLeg")
    local rightUpperArm = character:WaitForChild("RightUpperArm")
    local rightUpperLeg = character:WaitForChild("RightUpperLeg")
    local upperTorso = character:WaitForChild("UpperTorso")

    local Joints = {
        ["Torso"] = rootPart:FindFirstChild("RootJoint"),
        ["Head"] = head:FindFirstChild("Neck"),
        ["LeftUpperArm"] = leftUpperArm:FindFirstChild("LeftShoulder"),
        ["RightUpperArm"] = rightUpperArm:FindFirstChild("RightShoulder"),
        ["LeftUpperLeg"] = leftUpperLeg:FindFirstChild("LeftHip"),
        ["RightUpperLeg"] = rightUpperLeg:FindFirstChild("RightHip"),
        ["LeftFoot"] = leftFoot:FindFirstChild("LeftAnkle"),
        ["RightFoot"] = rightFoot:FindFirstChild("RightAnkle"),
        ["LeftHand"] = leftHand:FindFirstChild("LeftWrist"),
        ["RightHand"] = rightHand:FindFirstChild("RightWrist"),
        ["LeftLowerArm"] = leftLowerArm:FindFirstChild("LeftElbow"),
        ["RightLowerArm"] = rightLowerArm:FindFirstChild("RightElbow"),
        ["LeftLowerLeg"] = leftLowerLeg:FindFirstChild("LeftKnee"),
        ["RightLowerLeg"] = rightLowerLeg:FindFirstChild("RightKnee"),
        ["LowerTorso"] = lowerTorso:FindFirstChild("Root"),
        ["UpperTorso"] = upperTorso:FindFirstChild("Waist"),
    }
    
    fakeAnimStop = false
    fakeAnimRunning = true
    
    local part = Instance.new("Part")
    part.Size = Vector3.new(2048,0.1,2048)
    part.Anchored = true
    part.Position = game.Players.LocalPlayer.Character.LowerTorso.Position + Vector3.new(0,-0.2,0)
    part.Transparency = 1
    part.Parent = workspace
    game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true
    wait(0.1)
    for i,script in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
        if script:IsA("LocalScript") and script.Enabled then
            script.Enabled=false
        end
    end
    game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
    part:Destroy()
    spawn(function()
        while fakeAnimRunning do
        if fakeAnimStop then
            fakeAnimRunning = false
            break
        end

        pcall(function() -- Add pcall to handle errors gracefully
            local keyframes = NeededAssets:GetKeyframes()
            for ii = 1, #keyframes do
            if fakeAnimStop then break end

            local currentFrame = keyframes[ii]
            local nextFrame = keyframes[ii + 1] or keyframes[1] -- Loop back to first frame
            local currentTime = currentFrame.Time
            local nextTime = nextFrame.Time
            if nextTime <= currentTime then
                nextTime = nextTime + NeededAssets.Length
            end

            local frameLength = (nextTime - currentTime) / fakeAnimSpeed
            local startTime = tick()
            
            while tick() - startTime < frameLength and not fakeAnimStop do
                local alpha = (tick() - startTime) / frameLength
                
                pcall(function() -- Add nested pcall for pose updates
                for _, currentPose in pairs(currentFrame:GetDescendants()) do
                    local nextPose = nextFrame:FindFirstChild(currentPose.Name, true)
                    local motor = Joints[currentPose.Name]
                    
                    if motor and nextPose and ghostOriginalMotorCFrames[motor] then
                    local currentCF = ghostOriginalMotorCFrames[motor].C0 * currentPose.CFrame
                    local nextCF = ghostOriginalMotorCFrames[motor].C0 * nextPose.CFrame
                    motor.C0 = currentCF:Lerp(nextCF, alpha)
                    end
                end
                end)
                
                RunService.RenderStepped:Wait()
            end
            end
        end)
        
        -- Small delay to prevent tight loops if errors occur
        wait(0.03)
        end
    end)
    end
-- End of Fake Animation Section

-- NEW: Keybind Handling outside GUI
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end -- Don't process if chat or other UI is using input
    if input.UserInputType == Enum.UserInputType.Keyboard then
        for animName, keyCode in pairs(animationKeybinds) do
            if input.KeyCode == keyCode then
                local emotes = {
                    {"Back On 74 ID", "108088087568172"},
                    {"Boogie Bomb ID", "90159280044964"},
                    {"Billy Bounce ID", "96342044032488"},
                    {"Boogie Down ID", "83261869707370"},
                    {"Cupid's Arrow ID", "122288826913668"},
                    {"California Gurls ID", "131457845572132"},
                    {"Chase Me Down ID", "97455319886162"},
                    {"Default Dance ID", "9836885605"},
                    {"Dancery ID", "135978042300523"},
                    {"Desirable ID", "80125132098992"},
                    {"Disco Fever ID", "9836369561"},
                    {"Evil Plan ID", "99449894581351"},
                    {"Electro Shuffle ID", "9116910876"},
                    {"Electro Swing ID", "7839963379"},
                    {"FreeStylin ID", "107995227083576"},
                    {"Fresh ID", "9116897929"},
                    {"Groove Destroyer ID", "18147813725"},
                    {"Griddy ID", "135342670717393"},
                    {"Hot Marat ID", "7107202783"},
                    {"Hey Now ID", "7124753337"},
                    {"Hype ID", "121532134633896"},
                    {"Head Banger ID", "114573617035275"},
                    {"Infinite Dab ID", "74538409545244"},
                    {"Jabba Switchway ID", "8229514367"},
                    {"Jubi Slide ID", "16570530493"},
                    {"Lucid Dreams ID", "108895351743195"},
                    {"Look At Me ID", "129004554500202"},
                    {"Mr Blue Sky!!! ID", "8603017969"},
                    {"Maximum Bounce ID", "8703876822"},
                    {"Miku Live ID", "102039871027058"},
                    {"Miku Miku Beam ID", "116802170205791"},
                    {"No Cure ID", "76827103391437"},
                    {"Orange Justice ID", "11212163754"},
                    {"Phonky Turn ID", "122815417402057"},
                    {"Pull Up ID", "8871805743"},
                    {"Poki ID", "83405509049719"},
                    {"Party Hips ID", "91664350716653"},
                    {"Reanimated ID", "7757686890"},
                    {"Scenario ID", "8924083749"},
                    {"Snoop's Walk ID", "95567389800091"},
                    {"Slalom Style ID", "123624215915471"},
                    {"Toosie Slide ID", "8230248004"},
                    {"Take The L ID", "114109549820426"},
                    {"The Floss ID", "9003921069"},
                    {"Verve ID", "119993822512014"},
                    {"The Viper ID", "109195495448084"},
                    {"What You Want ID", "112811217802231"}
                }

                -- Find the animation ID for the given animation name
                local animationId = nil
                for _, emote in ipairs(emotes) do
                    if emote[1] == animName then
                        animationId = emote[2]
                        break
                    end
                end

                if animationId then
                    if fakeAnimRunning then
                        stopFakeAnimation() -- Stop any currently running animation
                    else
                        playFakeAnimation(animationId) -- Play the animation
                    end
                else
                    warn("Animation ID not found for keybind: " .. animName)
                end
                return -- Stop checking after finding a match
            end
        end
    end
end)

-- Initialization
LocalPlayer = Players.LocalPlayer

-- Monitor character reset and force disable reanimation
LocalPlayer.CharacterAdded:Connect(function(character)
    local humanoid = character:WaitForChild("Humanoid", 5)
    if humanoid then
        humanoid.Died:Connect(function()
            if ghostEnabled then
                -- Delay the reset process
                humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, false) -- Temporarily disable the Dead state
                task.delay(0.5, function() -- Delay for 0.5 seconds
                    humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, true) -- Re-enable the Dead state
                    humanoid:TakeDamage(humanoid.MaxHealth)
                end)

                -- Turn off reanimation
                setGhostEnabled(false)
                local toggleButton = gui:FindFirstChild("ToggleButton", true)
                if (toggleButton) then
                    toggleButton.Text = "Enable Reanimation"
                    toggleButton.BackgroundColor3 = Color3.fromRGB(76, 175, 80)
                end
            end
        end)
    end
end)

LocalPlayer.CharacterAdded:Connect(function(character)
    local humanoid = character:WaitForChild("Humanoid", 5)
    if humanoid then
        humanoid.Died:Connect(function()
            if ghostEnabled then
                -- Disable reanimation when the player dies
                setGhostEnabled(false)
                local toggleButton = gui:FindFirstChild("ToggleButton", true)
                if toggleButton then
                    toggleButton.Text = "Enable Reanimation"
                    toggleButton.BackgroundColor3 = Color3.fromRGB(76, 175, 80)
                end
            end
        end)
    end
end)

-- StarterGui.ScreenGui.Emotes
local function C_e()
    local player = Players.LocalPlayer

    -- Reference to the GUI buttons inside the scrolling frame
    local emoteFrame = player:WaitForChild("PlayerGui"):WaitForChild("EmoteGui"):WaitForChild("EmoteFrame")
    local scrollingFrame = emoteFrame:WaitForChild("ScrollingFrame")
    local emoteButton1 = scrollingFrame:WaitForChild("Emote1")
    local emoteButton2 = scrollingFrame:WaitForChild("Emote2")
    local emoteButton3 = scrollingFrame:WaitForChild("Emote3")

    -- Function to play the animation using the reanimation system
    local function playReanimation(animationId)
        if ghostEnabled then -- Ensure ghost mode is enabled
            playFakeAnimation(animationId)
        else
            warn("Reanimation is not enabled!")
        end
    end

    -- Connect the buttons to play the animation
    emoteButton1.MouseButton1Click:Connect(function()
        playReanimation(animationId1)
    end)

    emoteButton2.MouseButton1Click:Connect(function()
        playReanimation(animationId2)
    end)

    emoteButton3.MouseButton1Click:Connect(function()
        playReanimation(animationId3)
    end)
end

task.spawn(C_e)

-- StarterGui.ScreenGui.Emotes
local function C_e()
    local player = Players.LocalPlayer

    -- Reference to the GUI buttons inside the scrolling frame
    local emoteFrame = player:WaitForChild("PlayerGui"):WaitForChild("EmoteGui"):WaitForChild("EmoteFrame")
    local scrollingFrame = emoteFrame:WaitForChild("ScrollingFrame")
    local emoteButton1 = scrollingFrame:WaitForChild("Emote1")
    local emoteButton2 = scrollingFrame:WaitForChild("Emote2")
    local emoteButton3 = scrollingFrame:WaitForChild("Emote3")

    -- Function to play the animation using the reanimation system
    local function playReanimation(animationId)
        if ghostEnabled then -- Ensure ghost mode is enabled
            playFakeAnimation(animationId)
        else
            warn("Reanimation is not enabled!")
        end
    end

    -- Connect the buttons to play the animation
    emoteButton1.MouseButton1Click:Connect(function()
        playReanimation(animationId1)
    end)

    emoteButton2.MouseButton1Click:Connect(function()
        playReanimation(animationId2)
    end)

    emoteButton3.MouseButton1Click:Connect(function()
        playReanimation(animationId3)
    end)
end

task.spawn(C_e)
-- createEmoteGui()

-- Add the new GUI code
local G2L = {};

-- StarterGui.ScreenGui
G2L["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));
G2L["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;

-- StarterGui.ScreenGui.MainFrame
G2L["2"] = Instance.new("Frame", G2L["1"]);
G2L["2"]["BorderSizePixel"] = 0;
G2L["2"]["BackgroundColor3"] = Color3.fromRGB(23, 23, 25);
G2L["2"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
G2L["2"]["Size"] = UDim2.new(0, 318, 0, 460);
G2L["2"]["Position"] = UDim2.new(0, 667, 0, 447);
G2L["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["2"]["Name"] = [[MainFrame]];

-- StarterGui.ScreenGui.MainFrame.UICorner
G2L["3"] = Instance.new("UICorner", G2L["2"]);
G2L["3"]["CornerRadius"] = UDim.new(0, 7);

-- StarterGui.ScreenGui.TopBar
G2L["4"] = Instance.new("Frame", G2L["2"]);
G2L["4"]["BorderSizePixel"] = 0;
G2L["4"]["BackgroundColor3"] = Color3.fromRGB(31, 31, 35);
G2L["4"]["Size"] = UDim2.new(0, 316, 0, 51);
G2L["4"]["Position"] = UDim2.new(0, 1, 0, 0);
G2L["4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["4"]["Name"] = [[TopBar]];

-- StarterGui.ScreenGui.TopBar.UICorner
G2L["5"] = Instance.new("UICorner", G2L["4"]);
G2L["5"]["CornerRadius"] = UDim.new(0, 7);

-- StarterGui.ScreenGui.TopBar.TextLabel
G2L["6"] = Instance.new("TextLabel", G2L["4"]);
G2L["6"]["BorderSizePixel"] = 0;
G2L["6"]["TextSize"] = 18;
G2L["6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6"]["FontFace"] = Font.new([[rbxassetid://12187365977]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
G2L["6"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["6"]["BackgroundTransparency"] = 1;
G2L["6"]["Size"] = UDim2.new(0, 200, 0, 50);
G2L["6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["6"]["Text"] = [[Sentinel Reanimation]];
G2L["6"]["Position"] = UDim2.new(0.01852, 0, 0.03846, 0);

-- Add a close button to the top-right corner of the GUI
local closeButton = Instance.new("ImageButton", G2L["4"]) -- Add to the TopBar
closeButton.Name = "CloseButton"
closeButton.Size = UDim2.new(0, 24, 0, 24) -- Adjust size as needed
closeButton.Position = UDim2.new(1, -16, 0.72, -12) -- Top-right corner, slightly inset
closeButton.AnchorPoint = Vector2.new(1, 0.5) -- Align to the top-right
closeButton.BackgroundTransparency = 1 -- No background
closeButton.Image = "rbxassetid://10152135063" -- Default icon

-- Hover effect
closeButton.MouseEnter:Connect(function()
    closeButton.Image = "rbxassetid://104301854198764" -- Change to hover icon
end)

closeButton.MouseLeave:Connect(function()
    closeButton.Image = "rbxassetid://10152135063" -- Revert to default icon
end)

-- Hover effect
closeButton.MouseEnter:Connect(function()
    local hoverTween = TweenService:Create(closeButton, TweenInfo.new(0.2), {ImageColor3 = Color3.fromRGB(255, 0, 0)}) -- Change to red
    hoverTween:Play()
end)

closeButton.MouseLeave:Connect(function()
    local leaveTween = TweenService:Create(closeButton, TweenInfo.new(0.2), {ImageColor3 = Color3.fromRGB(255, 255, 255)}) -- Revert to white
    leaveTween:Play()
end)

-- Close functionality
closeButton.MouseButton1Click:Connect(function()
    G2L["1"]:Destroy() -- Destroy the entire GUI
end)

-- StarterGui.ScreenGui.Search
G2L["7"] = Instance.new("Frame", G2L["2"]);
G2L["7"]["BorderSizePixel"] = 0;
G2L["7"]["BackgroundColor3"] = Color3.fromRGB(31, 31, 35);
G2L["7"]["Size"] = UDim2.new(0, 294, 0, 36);
G2L["7"]["Position"] = UDim2.new(0, 12, 0, 66);
G2L["7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["7"]["Name"] = [[Search]];

-- StarterGui.ScreenGui.Search.UICorner
G2L["8"] = Instance.new("UICorner", G2L["7"]);
G2L["8"]["CornerRadius"] = UDim.new(0, 4);

-- StarterGui.ScreenGui.Search.UIStroke
G2L["9"] = Instance.new("UIStroke", G2L["7"]);
G2L["9"]["Transparency"] = 0.23;
G2L["9"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["9"]["Thickness"] = 0.7;
G2L["9"]["Color"] = Color3.fromRGB(58, 58, 58);

-- StarterGui.ScreenGui.Search.TextBox
G2L["a"] = Instance.new("TextBox", G2L["7"]);
G2L["a"]["CursorPosition"] = -1;
G2L["a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
G2L["a"]["BorderSizePixel"] = 0;
G2L["a"]["TextSize"] = 15;
G2L["a"]["TextColor3"] = Color3.fromRGB(136, 136, 136);
G2L["a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["a"]["FontFace"] = Font.new([[rbxassetid://12187365977]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
G2L["a"]["Size"] = UDim2.new(0, 183, 0, 29);
G2L["a"]["Position"] = UDim2.new(0.14286, 0, 0.08333, 0);
G2L["a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["a"]["Text"] = [[Search animations...]];
G2L["a"]["BackgroundTransparency"] = 1;

-- StarterGui.ScreenGui.Search.ImageLabel
G2L["b"] = Instance.new("ImageLabel", G2L["7"]);
G2L["b"]["BorderSizePixel"] = 0;
G2L["b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["b"]["Image"] = [[http://www.roblox.com/asset/?id=5107220207]];
G2L["b"]["Size"] = UDim2.new(0, 15, 0, 15);
G2L["b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["b"]["BackgroundTransparency"] = 1;
G2L["b"]["Position"] = UDim2.new(0.04422, 0, 0.27778, 0);

-- StarterGui.ScreenGui.Search.TextButton
G2L["c"] = Instance.new("TextButton", G2L["7"]);
G2L["c"]["BorderSizePixel"] = 0;
G2L["c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
G2L["c"]["TextSize"] = 17;
G2L["c"]["BackgroundColor3"] = Color3.fromRGB(57, 190, 249);
G2L["c"]["FontFace"] = Font.new([[rbxassetid://12187365977]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L["c"]["Size"] = UDim2.new(0, 62, 0, 36);
G2L["c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["c"]["Text"] = [[Add]];
G2L["c"]["Position"] = UDim2.new(0.78912, 0, 0, 0);

-- StarterGui.ScreenGui.Search.TextButton.UICorner
G2L["d"] = Instance.new("UICorner", G2L["c"]);
G2L["d"]["CornerRadius"] = UDim.new(0, 4);

-- StarterGui.ScreenGui.Buttons
G2L["e"] = Instance.new("Frame", G2L["2"]);
G2L["e"]["BorderSizePixel"] = 0;
G2L["e"]["BackgroundColor3"] = Color3.fromRGB(31, 31, 35);
G2L["e"]["Size"] = UDim2.new(0, 294, 0, 288);
G2L["e"]["Position"] = UDim2.new(0, 12, 0, 118);
G2L["e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["e"]["Name"] = [[Buttons]];

-- StarterGui.ScreenGui.Buttons.UICorner
G2L["f"] = Instance.new("UICorner", G2L["e"]);
G2L["f"]["CornerRadius"] = UDim.new(0, 4);

-- StarterGui.ScreenGui.Buttons.UIStroke
G2L["10"] = Instance.new("UIStroke", G2L["e"]);
G2L["10"]["Transparency"] = 0.23;
G2L["10"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["10"]["Thickness"] = 0.7;
G2L["10"]["Color"] = Color3.fromRGB(58, 58, 58);

-- StarterGui.ScreenGui.Enable
G2L["18"] = Instance.new("Frame", G2L["2"]);
G2L["18"]["BorderSizePixel"] = 0;
G2L["18"]["BackgroundColor3"] = Color3.fromRGB(31, 31, 35);
G2L["18"]["Size"] = UDim2.new(0, 294, 0, 36);
G2L["18"]["Position"] = UDim2.new(0, 12, 0, 415);
G2L["18"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["18"]["Name"] = [[Enable]];

-- StarterGui.ScreenGui.Enable.UIStroke
G2L["19"] = Instance.new("UIStroke", G2L["18"]);
G2L["19"]["Transparency"] = 0.23;
G2L["19"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
G2L["19"]["Thickness"] = 0.7;
G2L["19"]["Color"] = Color3.fromRGB(58, 58, 58);

-- StarterGui.ScreenGui.Enable.UICorner
G2L["1a"] = Instance.new("UICorner", G2L["18"]);
G2L["1a"]["CornerRadius"] = UDim.new(0, 4);

-- StarterGui.ScreenGui.Enable.TextLabel
G2L["1b"] = Instance.new("TextLabel", G2L["18"]);
G2L["1b"]["BorderSizePixel"] = 0;
G2L["1b"]["TextSize"] = 14;
G2L["1b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
G2L["1b"]["FontFace"] = Font.new([[rbxassetid://12187365977]], Enum.FontWeight.SemiBold, Enum.FontStyle.Normal);
G2L["1b"]["TextColor3"] = Color3.fromRGB(207, 207, 207);
G2L["1b"]["BackgroundTransparency"] = 1;
G2L["1b"]["Size"] = UDim2.new(0, 200, 0, 28);
G2L["1b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
G2L["1b"]["Text"] = [[Enable R15 Reanimation]];
G2L["1b"]["Position"] = UDim2.new(0.15986, 0, 0.11111, 0);

-- Add an invisible button behind the "Enable R15 Reanimation" text
G2L["1c"] = Instance.new("TextButton", G2L["18"]);
G2L["1c"]["BackgroundTransparency"] = 1; -- Make it invisible
G2L["1c"]["Size"] = UDim2.new(1, 0, 1, 0); -- Cover the entire frame
G2L["1c"]["Text"] = ""; -- No text
G2L["1c"]["Name"] = [[EnableButton]];

-- Add this to the "EnableButton" click event
G2L["1c"].MouseButton1Click:Connect(function()
    if ghostEnabled then
        setGhostEnabled(false)
        G2L["1b"].Text = "Enable R15 Reanimation"
        G2L["1b"].TextColor3 = Color3.fromRGB(207, 207, 207)
    else
        setGhostEnabled(true)
        G2L["1b"].Text = "Disable R15 Reanimation"
        G2L["1b"].TextColor3 = Color3.fromRGB(255, 85, 85)
    end
end)

-- Cache for loaded animations
local loadedAnimations = {}
local currentPlayingAnimation = nil

-- Function to play or stop the animation
local function toggleFakeAnimation(animationId)
    if not ghostEnabled then
        warn("Reanimation is not enabled!")
        return
    end

    -- If the same animation is already playing, stop it
    if currentPlayingAnimation == animationId then
        stopFakeAnimation()
        currentPlayingAnimation = nil
        return
    end

    -- Stop any currently playing animation
    if currentPlayingAnimation then
        stopFakeAnimation()
    end

    -- Load the animation if not already cached
    if not loadedAnimations[animationId] then
        local success, animation = pcall(function()
            return game:GetObjects("rbxassetid://" .. animationId)[1]
        end)
        if success and animation then
            loadedAnimations[animationId] = animation
        else
            warn("Failed to load animation with ID: " .. animationId)
            return
        end
    end

    -- Play the animation
    currentPlayingAnimation = animationId
    playFakeAnimation(animationId)
end

-- Update button click connection to use toggleFakeAnimation with smooth color transition
local function addButtonsToFrame()
    -- Create a scrolling frame for the emotes
    local parent = G2L["e"]
    local scrollingFrame = Instance.new("ScrollingFrame", parent)
    scrollingFrame.Name = "EmoteScrollingFrame"
    scrollingFrame.Size = UDim2.new(1, 0, 1, 0)
    scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 2000) -- Adjust canvas size for scrolling
    scrollingFrame.ScrollBarThickness = 5
    scrollingFrame.BackgroundTransparency = 1

    local yOffset = 10 -- Start with 10 pixels down instead of 0

    -- List of emotes to add
    local emotes = {
        {"Back On 74 ID", "108088087568172"},
        {"Boogie Bomb ID", "90159280044964"},
        {"Billy Bounce ID", "96342044032488"},
        {"Boogie Down ID", "83261869707370"},
        {"Cupid's Arrow ID", "122288826913668"},
        {"California Gurls ID", "131457845572132"},
        {"Chase Me Down ID", "97455319886162"},
        {"Default Dance ID", "9836885605"},
        {"Dancery ID", "135978042300523"},
        {"Desirable ID", "80125132098992"},
        {"Disco Fever ID", "9836369561"},
        {"Evil Plan ID", "99449894581351"},
        {"Electro Shuffle ID", "9116910876"},
        {"Electro Swing ID", "7839963379"},
        {"FreeStylin ID", "107995227083576"},
        {"Fresh ID", "9116897929"},
        {"Groove Destroyer ID", "18147813725"},
        {"Griddy ID", "135342670717393"},
        {"Hot Marat ID", "7107202783"},
        {"Hey Now ID", "7124753337"},
        {"Hype ID", "121532134633896"},
        {"Head Banger ID", "114573617035275"},
        {"Infinite Dab ID", "74538409545244"},
        {"Jabba Switchway ID", "8229514367"},
        {"Jubi Slide ID", "16570530493"},
        {"Lucid Dreams ID", "108895351743195"},
        {"Look At Me ID", "129004554500202"},
        {"Mr Blue Sky!!! ID", "8603017969"},
        {"Maximum Bounce ID", "8703876822"},
        {"Miku Live ID", "102039871027058"},
        {"Miku Miku Beam ID", "116802170205791"},
        {"No Cure ID", "76827103391437"},
        {"Orange Justice ID", "11212163754"},
        {"Phonky Turn ID", "122815417402057"},
        {"Pull Up ID", "8871805743"},
        {"Poki ID", "83405509049719"},
        {"Party Hips ID", "91664350716653"},
        {"Reanimated ID", "7757686890"},
        {"Scenario ID", "8924083749"},
        {"Snoop's Walk ID", "95567389800091"},
        {"Slalom Style ID", "123624215915471"},
        {"Toosie Slide ID", "8230248004"},
        {"Take The L ID", "114109549820426"},
        {"The Floss ID", "9003921069"},
        {"Verve ID", "119993822512014"},
        {"The Viper ID", "109195495448084"},
        {"What You Want ID", "112811217802231"}
    }

    local buttons = {} -- Store references to buttons for filtering

    for _, emote in ipairs(emotes) do
        local emoteName = emote[1]
        local emoteId = emote[2]

        -- Create a button for each emote
        local button = Instance.new("TextButton", scrollingFrame)
        button.Name = emoteName
        button.Size = UDim2.new(1, -20, 0, 32)
        button.Position = UDim2.new(0, 8, 0, yOffset)
        button.BackgroundColor3 = Color3.fromRGB(31, 31, 35)
        button.Text = emoteName
        button.TextSize = 17
        button.Font = Enum.Font.GothamSemibold
        button.TextColor3 = Color3.fromRGB(244, 244, 244)
        button.BorderSizePixel = 0

        local buttonStroke = Instance.new("UIStroke", button)
        buttonStroke.Transparency = 0.23
        buttonStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        buttonStroke.Thickness = 0.7
        buttonStroke.Color = Color3.fromRGB(58, 58, 58)
    
        local buttonCorner = Instance.new("UICorner", button)
        buttonCorner.CornerRadius = UDim.new(0, 4)
    
        -- Hover Animation
        button.MouseEnter:Connect(function()
            local hoverTween = TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(31, 31, 35)})
            hoverTween:Play()
        end)

        button.MouseLeave:Connect(function()
            local leaveTween = TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(31, 31, 35)})
            leaveTween:Play()
        end)

        -- Toggle animation with smooth color transition when button is clicked
        button.MouseButton1Click:Connect(function()
            local clickTween = TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(57, 190, 249)})
            clickTween:Play()
            clickTween.Completed:Connect(function()
                local resetTween = TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(31, 31, 35)})
                resetTween:Play()
            end)
            toggleFakeAnimation(emoteId)
        end)

        table.insert(buttons, button) -- Add button to the list for filtering
        yOffset = yOffset + 40 -- Increment vertical offset for the next button
    end

    -- Search functionality
    local searchBox = G2L["a"] -- Reference to the search TextBox
    searchBox:GetPropertyChangedSignal("Text"):Connect(function()
        local searchText = searchBox.Text:lower()
        yOffset = 10 -- Reset yOffset for repositioning buttons

        for _, button in ipairs(buttons) do
            if button.Name:lower():find(searchText) then
                button.Visible = true
                button.Position = UDim2.new(0, 8, 0, yOffset)
                yOffset = yOffset + 40
            else
                button.Visible = false
            end
        end

        -- Update the canvas size based on the number of visible buttons
        scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, yOffset)
    end)
end

-- Call the function to add buttons
addButtonsToFrame()

-- Smooth drag functionality for the entire GUI
local UIS = game:GetService("UserInputService")
local dragging = false
local dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    G2L["2"].Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end

G2L["2"].InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = G2L["2"].Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

G2L["2"].InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

return G2L["1"], require;
